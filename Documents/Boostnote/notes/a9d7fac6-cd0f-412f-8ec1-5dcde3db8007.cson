createdAt: "2019-09-25T02:06:51.295Z"
updatedAt: "2020-04-29T04:09:32.819Z"
type: "MARKDOWN_NOTE"
folder: "8af9713f3b0695b046b9"
title: "BigQuery"
content: '''
  ### BigQuery
  
  is Google's fully managed, NoOps, low cost analytics database. With BigQuery you can query terabytes and terabytes of data without having any infrastructure to manage, or needing a database administrator.
  
  ![Screen Shot 2020-04-28 at 11.07.32 PM.png](:storage/a9d7fac6-cd0f-412f-8ec1-5dcde3db8007/04b06a0b.png)
  
  `BigQuery allocates storage and query resources dynamically based on your usage patterns. Storage resources are allocated as you consume them, and deallocated as you remove data or you drop tables. Query resources are allocated according to the query type and complexity`. Each query uses some number of what are called slots. Slots are units of computation that comprise a certain amount of CPU and RAM.
  
  **BigQuery Applications**
  
  - Can serve as a collecter hold of all analytical data in your organization.
  - Run queries in: Terabytes in seconds, petabytes in minutes.
  
  **Examine a table**
  
  ```
  bq show project:public dataset.table
  ```
  
  **Run a query**
  
  ```
  bq query --use_legacy_sql=false \\
  'SELECT
     word,
     SUM(word_count) AS count
   FROM
     `bigquery-public-data`.samples.shakespeare
   WHERE
     word LIKE "%raisin%"
   GROUP BY
     word'
  ```
  
  - ``--use_legacy_sql=false` makes standard SQL the default query syntax.
  
  **creates a new dataset**
  
  - `bq ls`, list any existing datasets in your projects.
  - `bq ls Project ID:`, list the datasets in that specific project followed by a colon (:).
  - `bq mk babynames`, create a new dataset.
  - `bq load babynames.names2010 yob2010.txt name:string,gender:string,count:integer`, create a table with a definite schema.
  
  **Clean up**
  
  - bq rm -r babynames.
  
  
  There are many additional model types used in Machine Learning (like Neural Networks and decision trees) and available using libraries like TensorFlow. At this time, BQML supports the three listed above. Follow the BQML roadmap for more information:
  
  - Forecasting: Lineal Regression.
  - Classification, Logistic Regresseion.
  - Clusterization, K-means.
  
  ```SQL
  #standardSQL
  WITH params AS (
      SELECT
      1 AS TRAIN,
      2 AS EVAL
      ),
  
    daynames AS
      (SELECT ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'] AS daysofweek),
  
    taxitrips AS (
    SELECT
      (tolls_amount + fare_amount) AS total_fare,
      daysofweek[ORDINAL(EXTRACT(DAYOFWEEK FROM pickup_datetime))] AS dayofweek,
      EXTRACT(HOUR FROM pickup_datetime) AS hourofday,
      pickup_longitude AS pickuplon,
      pickup_latitude AS pickuplat,
      dropoff_longitude AS dropofflon,
      dropoff_latitude AS dropofflat,
      passenger_count AS passengers
    FROM
      `nyc-tlc.yellow.trips`, daynames, params
    WHERE
      trip_distance > 0 AND fare_amount > 0
      AND MOD(ABS(FARM_FINGERPRINT(CAST(pickup_datetime AS STRING))),1000) = params.TRAIN
    )
  
    SELECT *
    FROM taxitrips
    
    
    ---------
    /*HOW TO APPLIED ML MODEL IN BQ*/
    
    CREATE or REPLACE MODEL taxi.taxifare_model
  OPTIONS
    (model_type='linear_reg', labels=['total_fare']) AS
  
  WITH params AS (
      SELECT
      1 AS TRAIN,
      2 AS EVAL
      ),
  
    daynames AS
      (SELECT ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'] AS daysofweek),
  
    taxitrips AS (
    SELECT
      (tolls_amount + fare_amount) AS total_fare,
      daysofweek[ORDINAL(EXTRACT(DAYOFWEEK FROM pickup_datetime))] AS dayofweek,
      EXTRACT(HOUR FROM pickup_datetime) AS hourofday,
      pickup_longitude AS pickuplon,
      pickup_latitude AS pickuplat,
      dropoff_longitude AS dropofflon,
      dropoff_latitude AS dropofflat,
      passenger_count AS passengers
    FROM
      `nyc-tlc.yellow.trips`, daynames, params
    WHERE
      trip_distance > 0 AND fare_amount > 0
      AND MOD(ABS(FARM_FINGERPRINT(CAST(pickup_datetime AS STRING))),1000) = params.TRAIN
    )
  
    SELECT *
    FROM taxitrips
  ```
  
  **Select your performance criteria**
  
  For linear regression models you want to use a loss metric like Root Mean Square Error (RMSE). You want to keep training and improving the model until it has the lowest RMSE.
  
  In BQML, mean_squared_error is a queryable field when evaluating your trained ML model. Add a SQRT() to get RMSE.
  
  Now that training is complete, you can evaluate how well the model performs with this query using ML.EVALUATE. Copy and paste the following into the query editor and click Run:
  
  ```SQL
  #standardSQL
  SELECT
    SQRT(mean_squared_error) AS rmse
  FROM
    ML.EVALUATE(MODEL taxi.taxifare_model,
    (
  
    WITH params AS (
      SELECT
      1 AS TRAIN,
      2 AS EVAL
      ),
  
    daynames AS
      (SELECT ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'] AS daysofweek),
  
    taxitrips AS (
    SELECT
      (tolls_amount + fare_amount) AS total_fare,
      daysofweek[ORDINAL(EXTRACT(DAYOFWEEK FROM pickup_datetime))] AS dayofweek,
      EXTRACT(HOUR FROM pickup_datetime) AS hourofday,
      pickup_longitude AS pickuplon,
      pickup_latitude AS pickuplat,
      dropoff_longitude AS dropofflon,
      dropoff_latitude AS dropofflat,
      passenger_count AS passengers
    FROM
      `nyc-tlc.yellow.trips`, daynames, params
    WHERE
      trip_distance > 0 AND fare_amount > 0
      AND MOD(ABS(FARM_FINGERPRINT(CAST(pickup_datetime AS STRING))),1000) = params.EVAL
    )
  
    SELECT *
    FROM taxitrips
  
    ))
  ```
  
  After evaluating your model you get a RMSE of 9.47. Since we took the Root of the Mean Squared Error (RMSE) the 9.47 error can be evaluated in the same units as the total_fare so it's +-$9.47.
  
  Knowing whether or not this loss metric is acceptable to productionalize your model is entirely dependent on your benchmark criteria, which is set before model training begins. Benchmarking is establishing a minimum level of model performance and accuracy that is acceptable.
  
  **Improving the model with Feature Engineering**
  
  Building Machine Learning models is an iterative process. Once we have evaluated the performance of our initial model, we often go back and prune our features and rows to see if we can get an even better model.
  
  ```
  Nota:
  
  RSME defines the standard deviation of prediction errors, we see that the retrained linear regression made our model a lot more accurate.
  ```
'''
tags: []
isStarred: false
isTrashed: false
