createdAt: "2020-02-09T21:02:15.744Z"
updatedAt: "2020-02-09T23:20:47.695Z"
type: "MARKDOWN_NOTE"
folder: "28ee488a0fecd6ba780c"
title: "Yarn Main Concepts"
content: '''
  ### Yarn Main Concepts
  
  - Resource Managment.
  - Scheduler application.
  
  Neccesity of yarn:
  
  - increased scalibility.
  - efficency.
  - Cluster sharing.
  
  **Scalability**
  
  Yarn addresses the limitiations of hadoop 1.x by eliminating `Job Tracker`. Instead, task management is now decentralized, handled by the applications themselves.
  
  **Efficiency**
  
  Yarn introduces a more fine-grained approach to managing resources. Instead of slots (Slots represent a slice of computing resources and once the are defined, they cannot be changed without a process restart. One of the problem is that applications in MapReduce can variate in requirements and slot doesnt account for different resource requirements.), yarn keeps track of physical resources like memory and cpu. This approach allows yarn to be much smarter regarding how it allocates resources to tasks.
  
  **Cluster Sharing**
  
  With the ability of YArn to run multiple frameworks, organizations can eliminate the need for dedicated clusters and use a single cluster for all their data-processing needs.
  
  The `scheduler` and `fine-grained` resource model of yarn can ensure adequeate resources for each framework while making sure to use every available cycle on the cluster.
  
  #### Resource Requests
  
  Applications masters request cluster resources from the `Resource Manager` in the form of `ResourceRequest`. This is a object which contain the following:
  
  - ResourceName: The location of the host or rack where the resource is desired. If the property has the value `","`, it means any node in the cluster.
  - Priority: Used to specify intra-application priority for the request. Can be useful for frameworks that want to make sure certain resource.
  - Capability: The resource (i.e, memory and cpu) requeriments for executing the containers.
  - NumContainers: You can request more of one container with the same attributes.
  
  #### Containers
  
  The response to the `ResourceRequest` are the `containers`. Container represent an allocated resource on the cluster. The object attributes are:
  
  - Id: unique identifier.
  - Token: A security token use to validate the authencity of the container. Its validate by the NodeManager to be sure container was generated by the ResourceManager, which is the only one who can generate valida containers.
  - NodeId: Node which is relationated to the container. It will be always just one container.
  - Priority: The intra-application priority of the container. This should match with the priority of the Resourcerequest.
  - Resource: The resource allocated in the container. This should mathc with the capability of the ResourceRequest.
  
  #### Resource Manager
  
  The ResourceManager is a `scheduler`.
  
  **Scheduler**
  
  Scheduler helps to decide how resources are allocated amongst the different applications. Yarn ships with 2 different schedulers that should look familiar to most are explained:
  
  - Capacity Scheduler: The default scheduler of yarn.
  - Fair Scheduler: Its desinged to ensure that all aplications average out to an equal share of resources over time.
  - Fifo Scheduler.
  
  #### Application Master
  
  ResourceManager will be monitoring the `application master` and restarting, if it fails before complete the job.
  
  Each Job has its own application master.
  
  #### NodeManager and AuxiliaryServices
  
  With Yarn, the NodeManager replaces the TaskTracker and containers replace Tasks.
  
  NodeManager runs on every node and its responsible for container execution/cleanup. NodeManager also track the status for each container running on it.
  
  Auxiliary Services, helps to support key operations as MapReduce While using another applications. It has to be configured in the `yarn-site.xml`.
  
  If a container exceeds its allocation, the NodeManager will kill the task.
  
  NodeManager execute each container in a separate process.
  
  **limitations of yarn**
  
  - BackWard Compability.
  - Long-Lived Process.
  - Limited Resource Types.
'''
tags: []
isStarred: false
isTrashed: false
